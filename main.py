from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from handlers import start, help_command, get_main_reply_keyboard, MAIN_INLINE_KEYBOARD
from support import ADMIN_CHAT_ID, handle_support, support_message_handler, active_support_sessions, handle_support_buttons
# –±–µ–∑ admin_reply_handler

from dotenv import load_dotenv
import os
import httpx


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = "qwen/qwen3-235b-a22b"

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY –≤ .env")

# ---------- –ò–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
async def ask_openrouter(question: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://example.com",
        "X-Title": "TelegramBot"
    }
    data = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
            {"role": "user", "content": question}
        ]
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=data, timeout=30)
            response.raise_for_status()
            content = await response.json()
            return content["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenRouter:", e)
        return f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_msg = update.message.text.strip().lower()
    if user_msg == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["chat_with_ai"] = False
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_INLINE_KEYBOARD)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=get_main_reply_keyboard())
        return

    if context.user_data.get("awaiting_support"):
        await support_message_handler(update, context)
        return

    if context.user_data.get("chat_with_ai"):
        reply = await ask_openrouter(update.message.text)
        await update.message.reply_text(reply)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=MAIN_INLINE_KEYBOARD)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ----------
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("end_support_"):
        try:
            user_id = int(data.split("_")[-1])
            active_support_sessions.discard(user_id)

            await context.bot.send_message(
                chat_id=user_id,
                text="üîî –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_reply_keyboard()
            )

            await query.edit_message_text("‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except Exception as e:
            print(f"[handle_button] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.")
        return

    if data == "faq":
        from handlers import FAQ_QUESTIONS
        faq_text = "\n\n".join([f"‚Ä¢ *{q}*\n{a}" for q, a in FAQ_QUESTIONS.items()])
        await query.edit_message_text(f"‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n{faq_text}", parse_mode="Markdown")

    elif data == "about":
        await query.edit_message_text("‚ÑπÔ∏è –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–¥–∂–µ.")

    elif data == "support":
        await query.edit_message_text("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ...")
        await handle_support(update, context)

    elif data == "ask_question":
        context.user_data["chat_with_ai"] = True
        await query.edit_message_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")

    elif data == "main_menu":
        context.user_data["chat_with_ai"] = False
        await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_INLINE_KEYBOARD)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ----------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    import traceback
    print("–û—à–∏–±–∫–∞:", context.error)
    traceback.print_exception(type(context.error), context.error, context.error.__traceback__)

# ---------- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

# –ö–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ inline-–∫–Ω–æ–ø–∫–∏
app.add_handler(CallbackQueryHandler(handle_button))

#C–æ–æ–±—â–µ–Ω–∏—è
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(handle_support_buttons, pattern="^(user_end_support)$"))
app.add_handler(CallbackQueryHandler(handle_support_buttons, pattern="^(admin_reply_to_\\d+|admin_end_support_\\d+)$"))
app.add_handler(CallbackQueryHandler(handle_support, pattern="^support$"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.add_error_handler(error_handler)

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å OpenRouter –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
app.run_polling()
 