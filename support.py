# support.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
active_support_sessions = set()

# –ö–æ–º—É –∞–¥–º–∏–Ω —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å
admin_reply_context = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–∫–∞–∂–∏ —Å–≤–æ–π)
ADMIN_CHAT_ID = 123456789

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–¥–µ-—Ç–æ –µ—â—ë)
MAIN_INLINE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

# --- –ó–∞–ø—É—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    active_support_sessions.add(user_id)

    context.user_data["awaiting_support"] = True

    await query.answer()
    await query.edit_message_text(
        "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        "üìß Email: support@agpk.edu\n"
        "üì± Telegram: @agpk_support\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="user_end_support")]
        ])
    )

# --- –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ---
async def support_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if not context.user_data.get("awaiting_support"):
        return

    user = update.message.from_user
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} (ID: {user_id}):\n{text}",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_to_{user_id}"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"admin_end_support_{user_id}")
            ]
        ])
    )
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ---
async def handle_support_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == "user_end_support":
        active_support_sessions.discard(user_id)
        context.user_data["awaiting_support"] = False
        await query.edit_message_text("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
        )

    elif data.startswith("admin_end_support_"):
        try:
            target_user_id = int(data.rsplit("_", 1)[-1])
        except ValueError:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            return

        active_support_sessions.discard(target_user_id)
        await context.bot.send_message(
            chat_id=target_user_id,
            text="üîî –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –¥–∏–∞–ª–æ–≥."
        )
        await query.edit_message_text("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")

    elif data.startswith("admin_reply_to_"):
        try:
            target_user_id = int(data.rsplit("_", 1)[-1])
        except ValueError:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ ID.", show_alert=True)
            return

        admin_reply_context[user_id] = target_user_id
        await query.edit_message_text(f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {target_user_id}).")

# --- –°–æ–æ–±—â–µ–Ω–∏—è ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if user_id == ADMIN_CHAT_ID:
        if user_id in admin_reply_context:
            target_user_id = admin_reply_context.pop(user_id)
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üìâ –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return

    if context.user_data.get("awaiting_support"):
        await support_message_handler(update, context)
        return


    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if context.user_data.get("awaiting_support"):
        await support_message_handler(update, context)
